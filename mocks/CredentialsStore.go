// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/argoproj/argo-cd/engine/pkg"

	"github.com/stretchr/testify/mock"

	"github.com/argoproj/argo-cd/engine/pkg/apis/application/v1alpha1"
)

// CredentialsStore is an autogenerated mock type for the CredentialsStore type
type CredentialsStore struct {
	mock.Mock
}

// GetCluster provides a mock function with given fields: ctx, name
func (_m *CredentialsStore) GetCluster(ctx context.Context, name string) (*v1alpha1.Cluster, error) {
	ret := _m.Called(ctx, name)

	var r0 *v1alpha1.Cluster
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.Cluster); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepository provides a mock function with given fields: ctx, url
func (_m *CredentialsStore) GetRepository(ctx context.Context, url string) (*v1alpha1.Repository, error) {
	ret := _m.Called(ctx, url)

	var r0 *v1alpha1.Repository
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.Repository); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHelmRepositories provides a mock function with given fields: ctx
func (_m *CredentialsStore) ListHelmRepositories(ctx context.Context) ([]*v1alpha1.Repository, error) {
	ret := _m.Called(ctx)

	var r0 []*v1alpha1.Repository
	if rf, ok := ret.Get(0).(func(context.Context) []*v1alpha1.Repository); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchClusters provides a mock function with given fields: ctx, callback
func (_m *CredentialsStore) WatchClusters(ctx context.Context, callback func(*pkg.ClusterEvent)) error {
	ret := _m.Called(ctx, callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*pkg.ClusterEvent)) error); ok {
		r0 = rf(ctx, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
